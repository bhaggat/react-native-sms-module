/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNSmsModuleSpec symbols
#ifndef RNSmsModuleSpec_H
#define RNSmsModuleSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeSmsModule {
    struct GetSMSListFilters {
      NSString *sender() const;
      NSString *keyword() const;
      std::optional<double> dateFrom() const;
      std::optional<double> dateTo() const;
      std::optional<bool> unReadOnly() const;
      std::optional<bool> readOnly() const;

      GetSMSListFilters(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSmsModule_GetSMSListFilters)
+ (RCTManagedPointer *)JS_NativeSmsModule_GetSMSListFilters:(id)json;
@end
@protocol NativeSmsModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)getSMSList:(NSNumber *)offset
             limit:(NSNumber *)limit
           filters:(JS::NativeSmsModule::GetSMSListFilters &)filters
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)startSmsListener;
- (void)stopSmsListener;
- (void)addListener:(NSString *)eventName;
- (void)removeListeners:(double)count;

@end

@interface NativeSmsModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSmsModule'
   */
  class JSI_EXPORT NativeSmsModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeSmsModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline NSString *JS::NativeSmsModule::GetSMSListFilters::sender() const
{
  id const p = _v[@"sender"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSmsModule::GetSMSListFilters::keyword() const
{
  id const p = _v[@"keyword"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeSmsModule::GetSMSListFilters::dateFrom() const
{
  id const p = _v[@"dateFrom"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSmsModule::GetSMSListFilters::dateTo() const
{
  id const p = _v[@"dateTo"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeSmsModule::GetSMSListFilters::unReadOnly() const
{
  id const p = _v[@"unReadOnly"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeSmsModule::GetSMSListFilters::readOnly() const
{
  id const p = _v[@"readOnly"];
  return RCTBridgingToOptionalBool(p);
}
#endif // RNSmsModuleSpec_H
