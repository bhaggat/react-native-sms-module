/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  
#pragma mark - NativeSmsModuleGetSMSListFilters

template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
struct NativeSmsModuleGetSMSListFilters {
  P0 sender;
  P1 keyword;
  P2 dateFrom;
  P3 dateTo;
  P4 unReadOnly;
  P5 readOnly;
  bool operator==(const NativeSmsModuleGetSMSListFilters &other) const {
    return sender == other.sender && keyword == other.keyword && dateFrom == other.dateFrom && dateTo == other.dateTo && unReadOnly == other.unReadOnly && readOnly == other.readOnly;
  }
};

template <typename T>
struct NativeSmsModuleGetSMSListFiltersBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.sender)>(rt, value.getProperty(rt, "sender"), jsInvoker),
      bridging::fromJs<decltype(types.keyword)>(rt, value.getProperty(rt, "keyword"), jsInvoker),
      bridging::fromJs<decltype(types.dateFrom)>(rt, value.getProperty(rt, "dateFrom"), jsInvoker),
      bridging::fromJs<decltype(types.dateTo)>(rt, value.getProperty(rt, "dateTo"), jsInvoker),
      bridging::fromJs<decltype(types.unReadOnly)>(rt, value.getProperty(rt, "unReadOnly"), jsInvoker),
      bridging::fromJs<decltype(types.readOnly)>(rt, value.getProperty(rt, "readOnly"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::String senderToJs(jsi::Runtime &rt, decltype(types.sender) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String keywordToJs(jsi::Runtime &rt, decltype(types.keyword) value) {
    return bridging::toJs(rt, value);
  }

  static double dateFromToJs(jsi::Runtime &rt, decltype(types.dateFrom) value) {
    return bridging::toJs(rt, value);
  }

  static double dateToToJs(jsi::Runtime &rt, decltype(types.dateTo) value) {
    return bridging::toJs(rt, value);
  }

  static bool unReadOnlyToJs(jsi::Runtime &rt, decltype(types.unReadOnly) value) {
    return bridging::toJs(rt, value);
  }

  static bool readOnlyToJs(jsi::Runtime &rt, decltype(types.readOnly) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    if (value.sender) {
      result.setProperty(rt, "sender", bridging::toJs(rt, value.sender.value(), jsInvoker));
    }
    if (value.keyword) {
      result.setProperty(rt, "keyword", bridging::toJs(rt, value.keyword.value(), jsInvoker));
    }
    if (value.dateFrom) {
      result.setProperty(rt, "dateFrom", bridging::toJs(rt, value.dateFrom.value(), jsInvoker));
    }
    if (value.dateTo) {
      result.setProperty(rt, "dateTo", bridging::toJs(rt, value.dateTo.value(), jsInvoker));
    }
    if (value.unReadOnly) {
      result.setProperty(rt, "unReadOnly", bridging::toJs(rt, value.unReadOnly.value(), jsInvoker));
    }
    if (value.readOnly) {
      result.setProperty(rt, "readOnly", bridging::toJs(rt, value.readOnly.value(), jsInvoker));
    }
    return result;
  }
};



#pragma mark - NativeSmsModuleSmsData

template <typename P0, typename P1, typename P2, typename P3>
struct NativeSmsModuleSmsData {
  P0 id;
  P1 sender;
  P2 body;
  P3 timestamp;
  bool operator==(const NativeSmsModuleSmsData &other) const {
    return id == other.id && sender == other.sender && body == other.body && timestamp == other.timestamp;
  }
};

template <typename T>
struct NativeSmsModuleSmsDataBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.id)>(rt, value.getProperty(rt, "id"), jsInvoker),
      bridging::fromJs<decltype(types.sender)>(rt, value.getProperty(rt, "sender"), jsInvoker),
      bridging::fromJs<decltype(types.body)>(rt, value.getProperty(rt, "body"), jsInvoker),
      bridging::fromJs<decltype(types.timestamp)>(rt, value.getProperty(rt, "timestamp"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::String idToJs(jsi::Runtime &rt, decltype(types.id) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String senderToJs(jsi::Runtime &rt, decltype(types.sender) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String bodyToJs(jsi::Runtime &rt, decltype(types.body) value) {
    return bridging::toJs(rt, value);
  }

  static double timestampToJs(jsi::Runtime &rt, decltype(types.timestamp) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "id", bridging::toJs(rt, value.id, jsInvoker));
    result.setProperty(rt, "sender", bridging::toJs(rt, value.sender, jsInvoker));
    result.setProperty(rt, "body", bridging::toJs(rt, value.body, jsInvoker));
    result.setProperty(rt, "timestamp", bridging::toJs(rt, value.timestamp, jsInvoker));
    return result;
  }
};

class JSI_EXPORT NativeSmsModuleCxxSpecJSI : public TurboModule {
protected:
  NativeSmsModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value getSMSList(jsi::Runtime &rt, std::optional<double> offset, std::optional<double> limit, std::optional<jsi::Object> filters) = 0;
  virtual void startSmsListener(jsi::Runtime &rt) = 0;
  virtual void stopSmsListener(jsi::Runtime &rt) = 0;
  virtual void addListener(jsi::Runtime &rt, jsi::String eventName) = 0;
  virtual void removeListeners(jsi::Runtime &rt, double count) = 0;

};

template <typename T>
class JSI_EXPORT NativeSmsModuleCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "SmsModule";

protected:
  NativeSmsModuleCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeSmsModuleCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeSmsModuleCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeSmsModuleCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value getSMSList(jsi::Runtime &rt, std::optional<double> offset, std::optional<double> limit, std::optional<jsi::Object> filters) override {
      static_assert(
          bridging::getParameterCount(&T::getSMSList) == 4,
          "Expected getSMSList(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getSMSList, jsInvoker_, instance_, std::move(offset), std::move(limit), std::move(filters));
    }
    void startSmsListener(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::startSmsListener) == 1,
          "Expected startSmsListener(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::startSmsListener, jsInvoker_, instance_);
    }
    void stopSmsListener(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::stopSmsListener) == 1,
          "Expected stopSmsListener(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::stopSmsListener, jsInvoker_, instance_);
    }
    void addListener(jsi::Runtime &rt, jsi::String eventName) override {
      static_assert(
          bridging::getParameterCount(&T::addListener) == 2,
          "Expected addListener(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::addListener, jsInvoker_, instance_, std::move(eventName));
    }
    void removeListeners(jsi::Runtime &rt, double count) override {
      static_assert(
          bridging::getParameterCount(&T::removeListeners) == 2,
          "Expected removeListeners(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::removeListeners, jsInvoker_, instance_, std::move(count));
    }

  private:
    friend class NativeSmsModuleCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
